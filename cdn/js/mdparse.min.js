"use strict";export class MarkdownParser{emojiMap={};cache={};renderers={blank:(html,token,commands)=>`${html}\n`,html_block:(html,token,commands)=>{const body=token.content.replace(new RegExp(`^<${token.tag}[^>]*>`),"").replace(new RegExp(`</${token.tag}>$`),"");return`${html}<${token.tag}${token.attrs}>${commands.parse(body)}</${token.tag}>\n`},literal:(html,token,commands)=>`${html}${token.content}\n`,paragraph:(html,token,commands)=>`${html}<p>${commands.renderInline(token.content)}</p>\n`};rules=[];constructor(){this.initDefaultRules()}addRule(type,test,processor,render){this.rules.push({test:test,processor:processor}),this.renderers[type]=render}insertRule(index,test,processor){this.rules.splice(index,0,{test:test,processor:processor})}initDefaultRules(){const t=this;t.addRule("line-break",/^---.*/,((line,state)=>{const res=line.match(/^[-]+([^-]+).*/);if(res){const[,theme]=res;return{type:"line-break",theme:theme}}return{type:"line-break"}}),((html,token,commands)=>token.theme?`${html}<webui-line theme="${token.theme}"></webui-line>\n`:`${html}<webui-line></webui-line>\n`)),t.addRule("heading",/^#{1,6} /,((line,state)=>{const level=line.match(/^#+/)[0].length;return{type:"heading",level:level,content:line.slice(level+1).trim()}}),((html,token,commands)=>`${html}<h${token.level}>${commands.renderInline(token.content)}</h${token.level}>\n`)),t.addRule("ul_item",/^\s{0,3}\* /,((line,state)=>{const indent=line.match(/^\s*/)[0].length;return{type:"ul_item",content:line.trim().slice(2).trim(),indent:indent}}),((html,token,commands)=>(commands.closeListsAbove(token.indent),commands.stack.length&&"ul"===commands.stack[commands.stack.length-1].tag||(html+="<ul>",commands.stack.push({tag:"ul",indent:token.indent})),`${html}<li>${commands.renderInline(token.content)}</li>\n`))),t.addRule("ol_item",/^\s{0,3}\d+\. /,((line,state)=>{const indent=line.match(/^\s*/)[0].length;return{type:"ol_item",content:line.replace(/^\s*\d+\.\s+/,"").trim(),indent:indent}}),((html,token,commands)=>(commands.closeListsAbove(token.indent),commands.stack.length&&"ol"===commands.stack[commands.stack.length-1].tag||(html+="<ol>",commands.stack.push({tag:"ol",indent:token.indent})),`${html}<li>${commands.renderInline(token.content)}</li>\n`))),t.addRule("blockquote_group",/^> ?/,((line,state)=>state.inCodeBlock||state.inTemplate?{type:"literal",content:line}:(state.inBlockquote=!0,{type:"blockquote",content:line.replace(/^> ?/,"")})),((html,token,commands)=>`${html}<webui-quote theme="info">`+t.parse(token.content.join("\n"))+"</webui-quote>\n")),t.addRule("precode_start",/^[\s]*<pre><code>.*/,((line,state)=>(state.inCodeBlock||state.inTemplate||(state.inCodeBlock=!0,state.codeBlockTag="<pre><code>"),{type:"literal",content:line})),((html,token,commands)=>html)),t.addRule("precode_end",/^.*<\/code><\/pre>.*/,((line,state)=>("<pre><code>"===state.codeBlockTag&&(state.inCodeBlock=!1),{type:"literal",content:line})),((html,token,commands)=>html)),t.addRule("code_block_start",/^```/,((line,state)=>{let[,tag,lang]=line.match(/^([`]+)(.*)/);return state.inCodeBlock?state.codeBlockTag===tag?(state.inCodeBlock=!1,state.codeBlockTag="",{type:"code_block_end"}):{type:"literal",content:line}:(state.inCodeBlock=!0,state.codeBlockTag=tag,lang=lang?lang.trim():"text",{type:"code_block_start",lang:lang})}),((html,token,commands)=>`${html}<pre><code class="lang-${token.lang}">`)),t.addRule("code_block_end",/^```/,((line,state)=>{console.log("Unexpected use of code_block_end")}),((html,token,commands)=>`${html}</code></pre>\n`)),t.addRule("code_line",((line,state)=>state.inCodeBlock&&!/^```/.test(line)),((line,state)=>({type:"code_line",content:line})),((html,token,commands)=>`${html}${commands.escapeCode(token.content)}\n`)),t.addRule("html_selfclose",/^[\s]*<([a-z][a-z0-9-_]*)([^>]*)\/>[\s]*$/,((line,state)=>{const[,tag,attrs]=line.match(/^[\s]*<([a-z][a-z0-9-_]*)([^>]*)\/>[\s]*$/);return{type:"html_selfclose",tag:tag,attrs:attrs}}),((html,token,commands)=>`${html}<${token.tag}${token.attrs} />\n`)),t.addRule("html_withclose",/^[\s]*<([a-z][a-z0-9-_]*)([^>]*)>.*<\/\1>[\s]*$/,((line,state)=>{const[,tag,attrs,contents]=line.match(/^[\s]*<([a-z][a-z0-9-_]*)([^>]*)>(.*)<\/\1>[\s]*$/);return{type:"html_withclose",tag:tag,attrs:attrs,contents:contents}}),((html,token,commands)=>"template"===token.tag?`${html}<${token.tag}${token.attrs}>${token.contents}</${token.tag}>\n`:`${html}<${token.tag}${token.attrs}>${commands.renderInline(token.contents)}</${token.tag}>\n`)),t.addRule("template_open",/^[\s]*<template([^>]*)>.*$/,((line,state)=>{if(state.inCodeBlock)return{type:"literal",content:line};const[,attrs,contents]=line.match(/^[\s]*<template([^>]*)>(.*)$/);return state.templateLayer++,state.inTemplate||(state.inTemplate=!0),{type:"template_open",attrs:attrs,contents:contents}}),((html,token,commands)=>`${html}<template${token.attrs}>${commands.renderInline(token.contents)}\n`)),t.addRule("template_close",/^[^<]*<\/template>.*$/,((line,state)=>{if(state.inCodeBlock)return{type:"literal",content:line};const[,prefix,contents]=line.match(/^([^<]*)<\/template>(.*)$/);return state.templateLayer--,0===state.templateLayer&&(state.inTemplate=!1),{type:"template_close",prefix:prefix,contents:contents}}),((html,token,commands)=>`${html}${token.prefix}</template>${commands.renderInline(token.contents)}\n`)),t.addRule("html_open",/^[\s]*<([a-z][a-z0-9-_]*)([^>]*)>.*$/,((line,state)=>{const[,tag,attrs,contents]=line.match(/^[\s]*<([a-z][a-z0-9-_]*)([^>]*)>(.*)$/);return{type:"html_open",tag:tag,attrs:attrs,contents:contents}}),((html,token,commands)=>`${html}<${token.tag}${token.attrs}>${commands.renderInline(token.contents)}\n`)),t.addRule("html_close",/^[\s]*<\/([a-z][a-z0-9-_]*)>.*$/,((line,state)=>{const[,tag,contents]=line.match(/^[\s]*<\/([a-z][a-z0-9-_]*)>(.*)$/);return{type:"html_close",tag:tag,contents:contents}}),((html,token,commands)=>`${html}</${token.tag}>${commands.renderInline(token.contents)}\n`)),t.addRule("table",((line,state)=>line.includes("|")),((line,state)=>(state.tableBuffer.push(line),!1)),((html,token,commands)=>{const rows=token.rows.map((r=>r.split("|").slice(1,-1).map((c=>c.trim())))),head=rows[0],body=(rows[1],rows.slice(2));html+="<table><thead><tr>"+head.map((h=>`<th>${commands.renderInline(h)}</th>`)).join("")+"</tr></thead><tbody>";for(const row of body)html+="<tr>"+row.map((c=>`<td>${commands.renderInline(c)}</td>`)).join("")+"</tr>";return`${html}</tbody></table>\n`}))}parse(text){if(null==text||""===text)return"";const t=this;if(t.cache[text])return t.cache[text];const tokens=t.tokenize(text);let html=t.render(tokens);return t.cache[text]=html,html}tokenize(text){const t=this,state={tokens:[],lines:text.split(/\r?\n/),inCodeBlock:!1,inBlockquote:!1,inTemplate:!1,codeBlockTag:"",tableBuffer:[],blockquoteBuffer:[],templateLayer:0,captureLiteral:!1},flushTable=()=>{0!==state.tableBuffer.length&&(state.tokens.push({type:"table",rows:[...state.tableBuffer]}),state.tableBuffer=[])},flushBlockquote=()=>{state.inBlockquote&&(state.inBlockquote=!1,state.blockquoteBuffer.length&&(state.tokens.push({type:"blockquote_group",content:[...state.blockquoteBuffer]}),state.blockquoteBuffer.length=0))};for(let line of state.lines){let matched=!1;if(""!==line.trim()){for(let rule of t.rules)if("function"==typeof rule.test?rule.test(line,state):rule.test.test(line)){matched=!0;const result=rule.processor(line,state);if(state.inTemplate)state.tokens.push({type:"literal",content:line});else if(state.inCodeBlock&&"code_block_end"===result.type)state.tokens.push({type:"literal",content:line});else if(state.inCodeBlock&&"code_block_start"!==result.type)state.tokens.push({type:"code_line",content:line});else if(result){if("table"!==result.type&&flushTable(),"blockquote"===result.type){state.blockquoteBuffer.push(result.content);continue}flushBlockquote(),state.tokens.push(result)}break}matched||(state.inTemplate||state.inCodeBlock?state.tokens.push({type:"literal",content:line}):(state.inBlockquote&&(flushBlockquote(),state.inBlockquote=!1),flushTable(),state.tokens.push({type:"paragraph",content:line.trim()})))}else flushTable(),flushBlockquote(),state.tokens.push({type:"blank"})}return flushTable(),flushBlockquote(),state.tokens}render(tokens){const t=this;let html="";const stack=[],commands={stack:stack,closeListsAbove:level=>{for(;stack.length&&stack[stack.length-1].indent>=level;)html+=`</${stack.pop().tag}>\n`},escapeCode:t.escapeCode,escapeHtml:t.escapeHtml,parse:t.parse,renderInline:t.renderInline};for(const token of tokens){-1===["ol-item","ul-item"].indexOf(token.type)&&stack.length>0&&commands.closeListsAbove(0);const render=t.renderers[token.type];"function"==typeof render?html=render(html,token,commands):console.error("MarkdownParser error: Undefined token type %s",token.type,render,t.renderers)}return commands.closeListsAbove(0),html}renderInline(text){return text.replace(/\\\*/g,"&ast;").replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/__(.*?)__/g,"<strong>$1</strong>").replace(/_(.*?)_/g,"<em>$1</em>").replace(/`([^`]+)`/g,"<code>$1</code>").replace(/!\[(.*?)\]\((.*?) "(.*)"\)/g,'<img alt="$1" src="$2" title="$3" />').replace(/\[(.*?)\]\((.*?) "(.*)"\)/g,'<a href="$2" title="$3">$1</a>').replace(/!\[(.*?)\]\((.*?)\)/g,'<img alt="$1" src="$2" />').replace(/\[(.*?)\]\((.*?)\)/g,'<a href="$2">$1</a>').replace(/:([a-zA-Z0-9_+-]+):/g,'<webui-emoji emoji="$1"></webui-emoji>')}escapeQuote(text){return text.replace(/"/g,"&quot;")}escapeHtml(text){return text.replace(/"/g,"&quot;").replace(/'/g,"&#039;").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}escapeCode(text){return text.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}}