/*!
 * Web UI Dialog Action - https://webui.stoicdreams.com
 * A component for managing dialog actions within the web UI.
 * Authored by Erik Gassler - Stoic Dreams
 * Copyright Â© 2024-2025 Stoic Dreams - https://www.stoicdreams.com
 * Licensed under the MIT license - https://github.com/StoicDreams/MyFiCDN/blob/main/LICENSE
 */
"use strict";webui.define("webui-dialog-action",{content:!0,linkCss:!1,watchVisibility:!1,isInput:!1,preload:"",apiMethod:"post",contentType:"application/json",constructor:t=>{t._slotMain=t.template.querySelector("slot:not([name])"),t._slotSomething=t.template.querySelector('slot[name="something"]')},props:{sample:{get(){return this._sample},set(v){this._sample=v}}},flags:[],attr:["api","confirm","content-type","data-success","data-exception","json-success","header-message"],attrChanged:(t,property,value)=>{switch(property){case"api":let segments=value.split("|"),api=value;segments.length>1&&-1!==["get","post","put","delete","patch"].indexOf(segments[0].toLowerCase())&&(t.apiMethod=segments[0],api=segments[1]),api&&(t.apiUrl=api);break;case"maxHeight":t.style.maxHeight=webui.pxIfNumber(value)}},setValue:async function(value){if(void 0===value)return;const t=this;let content="";t.dataset.subscribe&&webui.setData(t.dataset.subscribe,void 0),t._slotMain.assignedElements().forEach((node=>{if("TEMPLATE"===node.nodeName)content=`${content}${node.innerHTML}`;else node.outerHTML&&(content=`${content}${node.outerHTML}`)})),content=webui.replaceAppData(`${content}<webui-alert></webui-alert>`);let url=t.apiUrl;webui.dialog({confirm:t.confirm||"Confirm",cancel:url?"Cancel":null,content:content,title:t.title||"Action",minWidth:"80%",onconfirm:(data,content)=>{let alert=content.querySelector("webui-alert");return new Promise((resolve=>{let method=t.apiMethod;if(url){let ct=t.contentType||"application/json",fetchData=null;"get"!==method.toLowerCase()&&("multipart/form-data"===ct?fetchData=data:(fetchData=Object.fromEntries(data),0===Object.keys(fetchData).length&&Object.assign(fetchData,value),fetchData.headers={"Content-Type":ct})),webui.fetchApi(url,fetchData,method).then((async resp=>{let message=await resp.text();if(resp.status<300){if(resolve(!0),t.jsonSuccess){let json=await JSON.parse(message);message=json[t.jsonSuccess]||json.message||message,t.dataset.success&&webui.setData(t.dataset.success,json)}else t.dataset.success&&webui.setData(t.dataset.success,message);t.headerMessage&&(message=webui.getResponseHeader(resp,...t.headerMessage.split("|"))||message),message&&webui.alert(message,"success")}else resolve(!1),t.headerMessage&&(message=webui.getResponseHeader(resp,...t.headerMessage.split("|"))||message),message&&alert.setValue(message,"danger")})).catch((ex=>{resolve(!1)}))}else resolve(!0)}))}}).catch((_=>{}))},connected:function(t){t.setupComponent()},disconnected:function(t){},reconnected:function(t){},setupComponent:function(){},shadowTemplate:'\n<slot></slot>\n<slot name="something"></slot>\n<style type="text/css">\n:host {\ndisplay:none;\n}\n</style>\n'});